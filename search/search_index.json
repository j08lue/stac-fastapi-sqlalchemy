{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Requirements","text":"<p>The SQLAlchemy backend requires PostGIS&gt;=3.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Issues and pull requests are more than welcome.</p>"},{"location":"contributing/#development-install","title":"Development install","text":"<pre><code>git clone https://github.com/stac-utils/stac-fastapi-sqlalchemy\ncd stac-fastapi-sqlalchemy\nmake install\n</code></pre> <p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<pre><code>git clone https://github.com/stac-utils/stac-fastapi-sqlalchemy\ncd stac-fastapi-sqlalchemy\npip install -e .[docs]\n</code></pre> <p>Hot-reloading docs:</p> <pre><code>mkdocs serve\n</code></pre> <p>To manually deploy docs (note you should never need to do this because GitHub Actions deploys automatically for new commits.):</p> <pre><code># Create API documentations\npdocs as_markdown \\\n--output_dir docs/api/ \\\n--exclude_source \\\n--overwrite \\\nstac_fastapi.sqlalchemy\n\n# deploy\nmkdocs gh-deploy\n</code></pre>"},{"location":"release-notes/","title":"Changelog","text":""},{"location":"release-notes/#unreleased","title":"Unreleased","text":"<p>As a part of this release, this repository was extracted from the main stac-fastapi repository.</p>"},{"location":"release-notes/#changed","title":"Changed","text":"<ul> <li>Default branch to main (#544)</li> </ul>"},{"location":"release-notes/#244-2023-03-09","title":"2.4.4 - 2023-03-09","text":""},{"location":"release-notes/#added","title":"Added","text":"<ul> <li>Nginx service as second docker-compose stack to demonstrate proxy (#503)</li> <li>Validation checks in CI using stac-api-validator (#508)</li> <li>Required links to the sqlalchemy ItemCollection endpoint (#508)</li> <li>Publication of docker images to GHCR (#525)</li> </ul>"},{"location":"release-notes/#changed_1","title":"Changed","text":"<ul> <li>Updated CI to test against pgstac v0.6.12 (#511)</li> <li>Reworked <code>update_openapi</code> and added a test for it (#523)</li> <li>Limit values above 10,000 are now replaced with 10,000 instead of returning a 400 error (#526)</li> <li>Updated pgstac to v0.7.1 (#535)</li> </ul>"},{"location":"release-notes/#removed","title":"Removed","text":"<ul> <li>Incorrect context STAC extension url from the landing page (#508)</li> </ul>"},{"location":"release-notes/#fixed","title":"Fixed","text":"<ul> <li>Allow url encoded values for <code>query</code> in GET requests (#504)</li> <li>Fix path in <code>register_update_item</code> docstring (#507)</li> <li><code>self</code> link rel for <code>/collections/{c_id}/items</code> (#508)</li> <li>Media type of the item collection endpoint (#508)</li> <li>Manually exclude non-truthy optional values from sqlalchemy serialization of Collections (#508)</li> <li>Support <code>intersects</code> in GET requests (#521)</li> <li>Deleting items that had repeated ids in other collections (#520)</li> <li>404 for missing collection on /items for sqlalchemy (#528)</li> <li>Conformance URIs for the filter extension (#540)</li> </ul>"},{"location":"release-notes/#deprecated","title":"Deprecated","text":"<ul> <li>Deprecated <code>VndOaiResponse</code> and <code>config_openapi</code>, will be removed in v3.0 (#523)</li> </ul>"},{"location":"release-notes/#243-2022-11-25","title":"2.4.3 - 2022-11-25","text":""},{"location":"release-notes/#added_1","title":"Added","text":"<ul> <li>Add the <code>ENABLED_EXTENSIONS</code> environment variable determining which extensions are enabled in the pgstac application, all extensions are enabled by default (#495)</li> </ul>"},{"location":"release-notes/#changed_2","title":"Changed","text":""},{"location":"release-notes/#removed_1","title":"Removed","text":""},{"location":"release-notes/#fixed_1","title":"Fixed","text":""},{"location":"release-notes/#242-2022-11-25","title":"2.4.2 - 2022-11-25","text":""},{"location":"release-notes/#added_2","title":"Added","text":"<ul> <li>Add support in pgstac backend for /queryables and /collections/{collection_id}/queryables endpoints with functions exposed in pgstac 0.6.8 (#474)</li> <li>Add <code>bbox</code> and <code>datetime</code> query parameters to <code>/collections/{collection_id}/items</code>. (#476, #380)</li> <li>Update pgstac requirement to 0.6.10</li> <li>Add <code>servers</code> and <code>description</code> to OpenAPI (#459)</li> </ul>"},{"location":"release-notes/#changed_3","title":"Changed","text":""},{"location":"release-notes/#removed_2","title":"Removed","text":"<ul> <li>Removed <code>stac_fastapi.api.routes.create_sync_endpoint</code> function to reduce code duplication (#471)</li> </ul>"},{"location":"release-notes/#fixed_2","title":"Fixed","text":"<ul> <li>Quote password in pgsql strings to accomodate special characters. (#455)</li> <li>Fix pgstac backend for /queryables endpoint to return 404 for non-existent collections (#482)</li> <li><code>/collection/{collection_id}/items</code> endpoints now return geojson media type (#488)</li> </ul>"},{"location":"release-notes/#241-2022-08-05","title":"2.4.1 - 2022-08-05","text":""},{"location":"release-notes/#added_3","title":"Added","text":""},{"location":"release-notes/#changed_4","title":"Changed","text":""},{"location":"release-notes/#removed_3","title":"Removed","text":""},{"location":"release-notes/#fixed_3","title":"Fixed","text":"<ul> <li><code>ciso8601</code> fails to build in some environments, instead use <code>pyiso8601</code> to parse datetimes.</li> </ul>"},{"location":"release-notes/#240-2022-08-04","title":"2.4.0 - 2022-08-04","text":""},{"location":"release-notes/#added_4","title":"Added","text":"<ul> <li>Add hook to allow adding dependencies to routes. (#295)</li> <li>Ability to POST an ItemCollection to the collections/{collectionId}/items route. (#367)</li> <li>Add STAC API - Collections conformance class. (383)</li> <li>Bulk item inserts for pgstac implementation. (411)</li> <li>Add APIRouter prefix support for pgstac implementation. (429)</li> <li>Respect <code>Forwarded</code> or <code>X-Forwarded-*</code> request headers when building links to better accommodate load balancers and proxies.</li> </ul>"},{"location":"release-notes/#changed_5","title":"Changed","text":"<ul> <li>Update FastAPI requirement to allow version &gt;=0.73 (#337)</li> <li>Bump version of PGStac to 0.4.5  (#346)</li> <li>Add support for PGStac Backend to use PyGeofilter to convert Get Request with cql2-text into cql2-json to send to PGStac backend (#346)</li> <li>Updated all conformance classes to 1.0.0-rc.1. (383)</li> <li>Bulk Transactions object Items iterator now returns the Item objects rather than the string IDs of the Item objects   (#355)</li> <li>docker-compose now runs uvicorn with hot-reloading enabled</li> <li>Bump version of PGStac to 0.6.2 that includes support for hydrating results in the API backed (#397)</li> <li>Make item geometry and bbox nullable in sqlalchemy backend. (#398)</li> <li>Transactions Extension update Item endpoint Item is now <code>/collections/{collection_id}/items/{item_id}</code> instead of   <code>/collections/{collection_id}/items</code> to align with STAC API   spec (#425)</li> </ul>"},{"location":"release-notes/#removed_4","title":"Removed","text":"<ul> <li>Remove the unused <code>router_middleware</code> function (#439)</li> </ul>"},{"location":"release-notes/#fixed_4","title":"Fixed","text":"<ul> <li>Bumped uvicorn version to 0.17 (from &gt;=0.12, &lt;=0.14) to resolve security vulnerability related to websockets dependency version (#343)</li> <li><code>AttributeError</code> and/or missing properties when requesting the complete <code>properties</code>-field in searches. Added test. (#339)</li> <li>Fixes issues (and adds tests) for issues caused by regression in pgstac (#345</li> <li>Update error response payloads to match the API spec. (#361)</li> <li>Fixed stray <code>/</code> before the <code>#</code> in several extension conformance class strings (383)</li> <li>SQLAlchemy backend bulk item insert now works (#356)</li> <li>PGStac Backend has stricter implementation of Fields Extension syntax (#397)</li> <li><code>/queryables</code> endpoint now has type <code>application/schema+json</code> instead of <code>application/json</code> (#421)</li> <li>Transactions Extension update Item endpoint validates that the <code>{collection_id}</code> path parameter matches the Item <code>\"collection\"</code> property   from the request body, if present, and falls back to using the path parameter if no <code>\"collection\"</code> property is found in the body   (#425)</li> <li>PGStac Backend Transactions endpoints return added Item/Collection instead of Item/Collection from request (#424)</li> <li>Application no longer breaks on startup when pagination extension is not included (#444)</li> </ul>"},{"location":"release-notes/#230-2022-01-18","title":"2.3.0 - 2022-01-18","text":""},{"location":"release-notes/#added_5","title":"Added","text":"<ul> <li>Add link with rel-type of 'service-doc', pointing to HTML API documentation (#298)</li> </ul>"},{"location":"release-notes/#changed_6","title":"Changed","text":"<ul> <li>Refactor to remove hardcoded search request models. Request models are now dynamically created based on the enabled extensions.   (#213)</li> <li>Change example data to use correct <code>type</code> for the example Joplin collection (#314)</li> <li>Changed the geometry type in the Item model from Polygon to Geometry.</li> <li>Upgrade pgstac backend to use version 0.4.2 (#321)</li> <li>STAC 1.0.0-beta.4 conformance classes updated (#298)</li> <li>Upgrade pgstac backend to use version 0.4.3 (#326)</li> </ul>"},{"location":"release-notes/#removed_5","title":"Removed","text":"<ul> <li>The tiles extension and all tiles links, added for demonstration purposes, have been removed. (#309)</li> </ul>"},{"location":"release-notes/#fixed_5","title":"Fixed","text":"<ul> <li>Import error using <code>importlib.util</code> (#325)</li> <li>Add environment variables required by upgraded pgstac container (#313)</li> <li>Enabled <code>ContextExtension</code> by default (#207)</li> <li>Content-type response headers for the /search endpoint now reflect the geojson response expected in the STAC api spec (#220)</li> <li>The minimum <code>limit</code> value for searches is now 1 (#296)</li> <li>Links stored with Collections and Items (e.g. license links) are now returned with those STAC objects (#282)</li> <li>Content-type response headers for the /api endpoint now reflect those expected in the STAC api spec (#287)</li> <li>Changed type options for datetime in BaseSearchGetRequest (#318)</li> <li>Expanded on tests to ensure properly testing get and post searches (#318)</li> <li>Ensure invalid datetimes result in 400s (#323)</li> </ul>"},{"location":"release-notes/#220-2021-10-19","title":"2.2.0 - 2021-10-19","text":""},{"location":"release-notes/#added_6","title":"Added","text":"<ul> <li>Add CQL2 support (#308)</li> <li>Add ability to override ItemCollectionUri and SearchGetRequest models (#271)</li> <li>Added <code>collections</code> attribute to list of default fields to include, so that we satisfy the STAC API spec, which requires a <code>collections</code> attribute to be output when an item is part of a collection (#276)</li> </ul>"},{"location":"release-notes/#changed_7","title":"Changed","text":"<ul> <li>Update pgstac to 0.4.0 (#308)</li> <li>Update get_item in sqlalchemy backend to allow for querying for items with same ids but in different collections. (#275)</li> </ul>"},{"location":"release-notes/#211-2021-09-23","title":"2.1.1 - 2021-09-23","text":""},{"location":"release-notes/#added_7","title":"Added","text":"<ul> <li>Add <code>middlewares</code> option in <code>stac_fastapi.api.StacApi</code> to allow custom middleware configuration (#267)</li> <li>Support non-interval datetime queries on sqlalchemy backend (#262)</li> <li>Restrict <code>limit</code> parameter in sqlalchemy backend to between 1 and 10,000. (#251)</li> <li>Fix OAS conformance URL (#263)</li> <li>Links to children collections from the landing pagge always have a title (#260)</li> <li>Fix collection links in the <code>all_collections</code> method in <code>pgstac</code> (#269)</li> </ul>"},{"location":"release-notes/#fixed_6","title":"Fixed","text":"<ul> <li>Pin FastAPI to 0.67 to avoid issues with rendering OpenAPI documentation (#246)</li> <li>Add <code>stac_version</code> to default search attributes (#268)</li> <li>pgstac backend specifies collection_id when fetching a single item (#279)</li> </ul>"},{"location":"release-notes/#210-2021-08-26","title":"2.1.0 - 2021-08-26","text":""},{"location":"release-notes/#added_8","title":"Added","text":"<ul> <li>Added filter extension. (#165)</li> <li>Add Support for CQL JSON to PGStac Backend (#209)</li> <li>Added item_serializer and item_table to BulkTransactionsClient in sqlalchemy backend (#210)</li> <li>Enable conformance class configuration (#214)</li> <li>Add/fix landing page links (#229)</li> <li>Correct response codes for bad/unusable bboxes (#235)</li> <li>Add a \"method\" field for search links (#236)</li> <li>Add extension schemas to landing (#237)</li> </ul>"},{"location":"release-notes/#removed_6","title":"Removed","text":"<ul> <li>Remove shapely from stac_fastapi.pgstac requirements (#225)</li> </ul>"},{"location":"release-notes/#changed_8","title":"Changed","text":"<ul> <li>Update to STAC API 1.0.0-beta.3 (#239)</li> </ul>"},{"location":"release-notes/#fixed_7","title":"Fixed","text":"<ul> <li>Make collection title optional in landing page links (#198)</li> <li>Preserve relative paths on link generation (#199)</li> <li>Fix collection endpoint return value to match spec (fixes regression) (#232)</li> <li>Return empty item collection instead of error when searching (#233)</li> <li>Correct response codes for bad/unusable bboxes (#235)</li> <li>Update pgstac to return 400 on invalid date parameter (#240)</li> </ul>"},{"location":"release-notes/#200-2021-07-26","title":"2.0.0 - 2021-07-26","text":"<ul> <li>Refactor stac-fastapi into submodules (#106stac-utils/stac-fastapi/pull/106)</li> <li>Add pgstac backend (#126)</li> <li>Upgrade to stac-pydantic 2.0.0 and stac-spec 1.0.0 (#181)</li> </ul>"},{"location":"release-notes/#110-2021-01-28","title":"1.1.0 - 2021-01-28","text":"<ul> <li>Improve how the library declares API extensions (#54)</li> <li>Add postgres bulk transactions client (#59)</li> <li>Update TiTiler version (#61)</li> <li>Use attrs instead of dataclasses (#73)</li> <li>Remove postgres database connection from API layer (#74)</li> <li>Fix <code>pre-commit</code> config (#75)</li> </ul>"},{"location":"release-notes/#100-2020-09-28","title":"1.0.0 - 2020-09-28","text":"<ul> <li>First PyPi release!</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/","title":"Module stac_fastapi.sqlalchemy","text":"<p>sqlalchemy submodule.</p>"},{"location":"api/stac_fastapi/sqlalchemy/#sub-modules","title":"Sub-modules","text":"<ul> <li>stac_fastapi.sqlalchemy.app</li> <li>stac_fastapi.sqlalchemy.config</li> <li>stac_fastapi.sqlalchemy.core</li> <li>stac_fastapi.sqlalchemy.extensions</li> <li>stac_fastapi.sqlalchemy.models</li> <li>stac_fastapi.sqlalchemy.serializers</li> <li>stac_fastapi.sqlalchemy.session</li> <li>stac_fastapi.sqlalchemy.tokens</li> <li>stac_fastapi.sqlalchemy.transactions</li> <li>stac_fastapi.sqlalchemy.version</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/app/","title":"Module stac_fastapi.sqlalchemy.app","text":"<p>FastAPI application.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#variables","title":"Variables","text":"<pre><code>api\n</code></pre> <pre><code>app\n</code></pre> <pre><code>extensions\n</code></pre> <pre><code>handler\n</code></pre> <pre><code>session\n</code></pre> <pre><code>settings\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#functions","title":"Functions","text":""},{"location":"api/stac_fastapi/sqlalchemy/app/#create_handler","title":"create_handler","text":"<pre><code>def create_handler(\n    app\n)\n</code></pre> <p>Create a handler to use with AWS Lambda if mangum available.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#run","title":"run","text":"<pre><code>def run(\n\n)\n</code></pre> <p>Run app from command line using uvicorn if available.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/app/#post_request_model","title":"post_request_model","text":"<pre><code>class post_request_model(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Search model.</p> <p>Replace base model in STAC-pydantic as it includes additional fields, not in the core model. github.com/radiantearth/stac-api-spec/tree/master/item-search#query-parameter-table</p> <p>PR to fix this: stac-utils/stac-pydantic!100</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.types.search.BaseSearchPostRequest</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/app/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#static-methods","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/app/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/app/#validate_bbox","title":"validate_bbox","text":"<pre><code>def validate_bbox(\n    v: Union[Tuple[Union[float, int], Union[float, int], Union[float, int], Union[float, int]], Tuple[Union[float, int], Union[float, int], Union[float, int], Union[float, int], Union[float, int], Union[float, int]]]\n)\n</code></pre> <p>Check order of supplied bbox coordinates.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#validate_datetime","title":"validate_datetime","text":"<pre><code>def validate_datetime(\n    v\n)\n</code></pre> <p>Validate datetime.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#validate_spatial","title":"validate_spatial","text":"<pre><code>def validate_spatial(\n    v,\n    values\n)\n</code></pre> <p>Check bbox and intersects are not both supplied.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#instance-variables","title":"Instance variables","text":"<pre><code>end_date\n</code></pre> <p>Extract the end date from the datetime string.</p> <pre><code>spatial_filter\n</code></pre> <p>Return a geojson-pydantic object representing the spatial filter for the search request.</p> <p>Check for both because the <code>bbox</code> and <code>intersects</code> parameters are mutually exclusive.</p> <pre><code>start_date\n</code></pre> <p>Extract the start date from the datetime string.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/app/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/stac_fastapi/sqlalchemy/app/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/stac_fastapi/sqlalchemy/app/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/stac_fastapi/sqlalchemy/config/","title":"Module stac_fastapi.sqlalchemy.config","text":"<p>Postgres API configuration.</p>"},{"location":"api/stac_fastapi/sqlalchemy/config/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/config/#sqlalchemysettings","title":"SqlalchemySettings","text":"<pre><code>class SqlalchemySettings(\n    __pydantic_self__,\n    _env_file: Union[str, os.PathLike, List[Union[str, os.PathLike]], Tuple[Union[str, os.PathLike], ...], NoneType] = '&lt;object object at 0x7f462405dc10&gt;',\n    _env_file_encoding: Union[str, NoneType] = None,\n    _env_nested_delimiter: Union[str, NoneType] = None,\n    _secrets_dir: Union[str, os.PathLike, NoneType] = None,\n    **values: Any\n)\n</code></pre> <p>Postgres-specific API settings.</p>"},{"location":"api/stac_fastapi/sqlalchemy/config/#attributes","title":"Attributes","text":"Name Type Description Default postgres_user None postgres username. None postgres_pass None postgres password. None postgres_host_reader None hostname for the reader connection. None postgres_host_writer None hostname for the writer connection. None postgres_port None database port. None postgres_dbname None database name. None"},{"location":"api/stac_fastapi/sqlalchemy/config/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.types.config.ApiSettings</li> <li>pydantic.env_settings.BaseSettings</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/config/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#static-methods","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/config/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/stac_fastapi/sqlalchemy/config/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/stac_fastapi/sqlalchemy/config/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/config/#instance-variables","title":"Instance variables","text":"<pre><code>reader_connection_string\n</code></pre> <p>Create reader psql connection string.</p> <pre><code>writer_connection_string\n</code></pre> <p>Create writer psql connection string.</p>"},{"location":"api/stac_fastapi/sqlalchemy/config/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/config/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/stac_fastapi/sqlalchemy/config/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/stac_fastapi/sqlalchemy/config/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/","title":"Module stac_fastapi.sqlalchemy.core","text":"<p>Item crud client.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#variables","title":"Variables","text":"<pre><code>NumType\n</code></pre> <pre><code>logger\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/core/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/core/#corecrudclient","title":"CoreCrudClient","text":"<pre><code>class CoreCrudClient(\n    token_table: Type[stac_fastapi.sqlalchemy.models.database.PaginationToken] = &lt;class 'stac_fastapi.sqlalchemy.models.database.PaginationToken'&gt;,\n    stac_version: str = '1.0.0',\n    landing_page_id: str = 'stac-fastapi',\n    title: str = 'stac-fastapi',\n    description: str = 'stac-fastapi',\n    base_conformance_classes: List[str] = NOTHING,\n    extensions: List[stac_fastapi.types.extension.ApiExtension] = NOTHING,\n    post_request_model=&lt;class 'stac_fastapi.types.search.BaseSearchPostRequest'&gt;,\n    session: stac_fastapi.sqlalchemy.session.Session = NOTHING,\n    item_table: Type[stac_fastapi.sqlalchemy.models.database.Item] = &lt;class 'stac_fastapi.sqlalchemy.models.database.Item'&gt;,\n    collection_table: Type[stac_fastapi.sqlalchemy.models.database.Collection] = &lt;class 'stac_fastapi.sqlalchemy.models.database.Collection'&gt;,\n    item_serializer: Type[stac_fastapi.sqlalchemy.serializers.Serializer] = &lt;class 'stac_fastapi.sqlalchemy.serializers.ItemSerializer'&gt;,\n    collection_serializer: Type[stac_fastapi.sqlalchemy.serializers.Serializer] = &lt;class 'stac_fastapi.sqlalchemy.serializers.CollectionSerializer'&gt;\n)\n</code></pre> <p>Client for core endpoints defined by stac.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.sqlalchemy.tokens.PaginationTokenClient</li> <li>stac_fastapi.types.core.BaseCoreClient</li> <li>stac_fastapi.types.core.LandingPageMixin</li> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/core/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/core/#all_collections","title":"all_collections","text":"<pre><code>def all_collections(\n    self,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.Collections\n</code></pre> <p>Read all collections from the database.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#conformance","title":"conformance","text":"<pre><code>def conformance(\n    self,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.Conformance\n</code></pre> <p>Conformance classes.</p> <p>Called with <code>GET /conformance</code>.</p> <p>Returns:</p> Type Description None Conformance classes which the server conforms to."},{"location":"api/stac_fastapi/sqlalchemy/core/#conformance_classes","title":"conformance_classes","text":"<pre><code>def conformance_classes(\n    self\n) -&gt; List[str]\n</code></pre> <p>Generate conformance classes by adding extension conformance to base conformance classes.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#extension_is_enabled","title":"extension_is_enabled","text":"<pre><code>def extension_is_enabled(\n    self,\n    extension: str\n) -&gt; bool\n</code></pre> <p>Check if an api extension is enabled.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#get_collection","title":"get_collection","text":"<pre><code>def get_collection(\n    self,\n    collection_id: str,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.Collection\n</code></pre> <p>Get collection by id.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#get_item","title":"get_item","text":"<pre><code>def get_item(\n    self,\n    item_id: str,\n    collection_id: str,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.Item\n</code></pre> <p>Get item by id.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#get_search","title":"get_search","text":"<pre><code>def get_search(\n    self,\n    collections: Union[List[str], NoneType] = None,\n    ids: Union[List[str], NoneType] = None,\n    bbox: Union[List[Union[float, int]], NoneType] = None,\n    datetime: Union[str, datetime.datetime, NoneType] = None,\n    limit: Union[int, NoneType] = 10,\n    query: Union[str, NoneType] = None,\n    token: Union[str, NoneType] = None,\n    fields: Union[List[str], NoneType] = None,\n    sortby: Union[str, NoneType] = None,\n    intersects: Union[str, NoneType] = None,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.ItemCollection\n</code></pre> <p>GET search catalog.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#get_token","title":"get_token","text":"<pre><code>def get_token(\n    self,\n    token_id: str\n) -&gt; str\n</code></pre> <p>Retrieve a keyset from the database.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#insert_token","title":"insert_token","text":"<pre><code>def insert_token(\n    self,\n    keyset: str,\n    tries: int = 0\n) -&gt; str\n</code></pre> <p>Insert a keyset into the database.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#item_collection","title":"item_collection","text":"<pre><code>def item_collection(\n    self,\n    collection_id: str,\n    bbox: Union[List[Union[float, int]], NoneType] = None,\n    datetime: Union[str, NoneType] = None,\n    limit: int = 10,\n    token: str = None,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.ItemCollection\n</code></pre> <p>Read an item collection from the database.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#landing_page","title":"landing_page","text":"<pre><code>def landing_page(\n    self,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.LandingPage\n</code></pre> <p>Landing page.</p> <p>Called with <code>GET /</code>.</p> <p>Returns:</p> Type Description None API landing page, serving as an entry point to the API."},{"location":"api/stac_fastapi/sqlalchemy/core/#list_conformance_classes","title":"list_conformance_classes","text":"<pre><code>def list_conformance_classes(\n    self\n)\n</code></pre> <p>Return a list of conformance classes, including implemented extensions.</p>"},{"location":"api/stac_fastapi/sqlalchemy/core/#post_search","title":"post_search","text":"<pre><code>def post_search(\n    self,\n    search_request: stac_fastapi.types.search.BaseSearchPostRequest,\n    **kwargs\n) -&gt; stac_fastapi.types.stac.ItemCollection\n</code></pre> <p>POST search catalog.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/","title":"Module stac_fastapi.sqlalchemy.serializers","text":"<p>Serializers.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/serializers/#collectionserializer","title":"CollectionSerializer","text":"<pre><code>class CollectionSerializer(\n\n)\n</code></pre> <p>Serialization methods for STAC collections.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.sqlalchemy.serializers.Serializer</li> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#static-methods","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/serializers/#db_to_stac","title":"db_to_stac","text":"<pre><code>def db_to_stac(\n    db_model: stac_fastapi.sqlalchemy.models.database.Collection,\n    base_url: str\n) -&gt; &lt;class 'TypedDict'&gt;\n</code></pre> <p>Transform database model to stac collection.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#row_to_dict","title":"row_to_dict","text":"<pre><code>def row_to_dict(\n    db_model: sqlalchemy.ext.declarative.api.Base\n)\n</code></pre> <p>Transform a database model to it's dictionary representation.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#stac_to_db","title":"stac_to_db","text":"<pre><code>def stac_to_db(\n    stac_data: &lt;class 'TypedDict'&gt;,\n    exclude_geometry: bool = False\n) -&gt; stac_fastapi.sqlalchemy.models.database.Collection\n</code></pre> <p>Transform stac collection to database model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#itemserializer","title":"ItemSerializer","text":"<pre><code>class ItemSerializer(\n\n)\n</code></pre> <p>Serialization methods for STAC items.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.sqlalchemy.serializers.Serializer</li> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#static-methods_1","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/serializers/#db_to_stac_1","title":"db_to_stac","text":"<pre><code>def db_to_stac(\n    db_model: stac_fastapi.sqlalchemy.models.database.Item,\n    base_url: str\n) -&gt; stac_fastapi.types.stac.Item\n</code></pre> <p>Transform database model to stac item.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#row_to_dict_1","title":"row_to_dict","text":"<pre><code>def row_to_dict(\n    db_model: sqlalchemy.ext.declarative.api.Base\n)\n</code></pre> <p>Transform a database model to it's dictionary representation.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#stac_to_db_1","title":"stac_to_db","text":"<pre><code>def stac_to_db(\n    stac_data: &lt;class 'TypedDict'&gt;,\n    exclude_geometry: bool = False\n) -&gt; stac_fastapi.sqlalchemy.models.database.Item\n</code></pre> <p>Transform stac item to database model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#serializer","title":"Serializer","text":"<pre><code>class Serializer(\n\n)\n</code></pre> <p>Defines serialization methods between the API and the data model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#descendants","title":"Descendants","text":"<ul> <li>stac_fastapi.sqlalchemy.serializers.ItemSerializer</li> <li>stac_fastapi.sqlalchemy.serializers.CollectionSerializer</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#static-methods_2","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/serializers/#db_to_stac_2","title":"db_to_stac","text":"<pre><code>def db_to_stac(\n    db_model: sqlalchemy.ext.declarative.api.Base,\n    base_url: str\n) -&gt; &lt;class 'TypedDict'&gt;\n</code></pre> <p>Transform database model to stac.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#row_to_dict_2","title":"row_to_dict","text":"<pre><code>def row_to_dict(\n    db_model: sqlalchemy.ext.declarative.api.Base\n)\n</code></pre> <p>Transform a database model to it's dictionary representation.</p>"},{"location":"api/stac_fastapi/sqlalchemy/serializers/#stac_to_db_2","title":"stac_to_db","text":"<pre><code>def stac_to_db(\n    stac_data: &lt;class 'TypedDict'&gt;,\n    exclude_geometry: bool = False\n) -&gt; sqlalchemy.ext.declarative.api.Base\n</code></pre> <p>Transform stac to database model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/","title":"Module stac_fastapi.sqlalchemy.session","text":"<p>database session management.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#variables","title":"Variables","text":"<pre><code>logger\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/session/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/session/#fastapisessionmaker","title":"FastAPISessionMaker","text":"<pre><code>class FastAPISessionMaker(\n    database_uri: str\n)\n</code></pre> <p>FastAPISessionMaker.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>fastapi_utils.session.FastAPISessionMaker</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/session/#instance-variables","title":"Instance variables","text":"<pre><code>cached_engine\n</code></pre> <p>Returns a lazily-cached sqlalchemy engine for the instance's database_uri.</p> <pre><code>cached_sessionmaker\n</code></pre> <p>Returns a lazily-cached sqlalchemy sessionmaker using the instance's (lazily-cached) engine.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/session/#context_session","title":"context_session","text":"<pre><code>def context_session(\n    self\n) -&gt; Iterator[sqlalchemy.orm.session.Session]\n</code></pre> <p>Override base method to include exception handling.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#get_db","title":"get_db","text":"<pre><code>def get_db(\n    self\n) -&gt; Iterator[sqlalchemy.orm.session.Session]\n</code></pre> <p>A generator function that yields a sqlalchemy orm session and cleans up the session once resumed after yielding.</p> <p>Can be used directly as a context-manager FastAPI dependency, or yielded from inside a separate dependency.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#get_new_engine","title":"get_new_engine","text":"<pre><code>def get_new_engine(\n    self\n) -&gt; sqlalchemy.engine.base.Engine\n</code></pre> <p>Returns a new sqlalchemy engine using the instance's database_uri.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#get_new_sessionmaker","title":"get_new_sessionmaker","text":"<pre><code>def get_new_sessionmaker(\n    self,\n    engine: Union[sqlalchemy.engine.base.Engine, NoneType]\n) -&gt; sqlalchemy.orm.session.sessionmaker\n</code></pre> <p>Returns a new sessionmaker for the provided sqlalchemy engine. If no engine is provided, the</p> <p>instance's (lazily-cached) engine is used.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#reset_cache","title":"reset_cache","text":"<pre><code>def reset_cache(\n    self\n) -&gt; None\n</code></pre> <p>Resets the engine and sessionmaker caches.</p> <p>After calling this method, the next time you try to use the cached engine or sessionmaker, new ones will be created.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#session","title":"Session","text":"<pre><code>class Session(\n    reader_conn_string: str,\n    writer_conn_string: str\n)\n</code></pre> <p>Database session management.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#static-methods","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/session/#create_from_env","title":"create_from_env","text":"<pre><code>def create_from_env(\n\n)\n</code></pre> <p>Create from environment.</p>"},{"location":"api/stac_fastapi/sqlalchemy/session/#create_from_settings","title":"create_from_settings","text":"<pre><code>def create_from_settings(\n    settings: stac_fastapi.sqlalchemy.config.SqlalchemySettings\n) -&gt; 'Session'\n</code></pre> <p>Create a Session object from settings.</p>"},{"location":"api/stac_fastapi/sqlalchemy/tokens/","title":"Module stac_fastapi.sqlalchemy.tokens","text":"<p>Pagination token client.</p>"},{"location":"api/stac_fastapi/sqlalchemy/tokens/#variables","title":"Variables","text":"<pre><code>logger\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/tokens/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/tokens/#paginationtokenclient","title":"PaginationTokenClient","text":"<pre><code>class PaginationTokenClient(\n    session: stac_fastapi.sqlalchemy.session.Session = NOTHING,\n    token_table: Type[stac_fastapi.sqlalchemy.models.database.PaginationToken] = &lt;class 'stac_fastapi.sqlalchemy.models.database.PaginationToken'&gt;\n)\n</code></pre> <p>Pagination token specific CRUD operations.</p>"},{"location":"api/stac_fastapi/sqlalchemy/tokens/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/tokens/#descendants","title":"Descendants","text":"<ul> <li>stac_fastapi.sqlalchemy.core.CoreCrudClient</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/tokens/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/tokens/#get_token","title":"get_token","text":"<pre><code>def get_token(\n    self,\n    token_id: str\n) -&gt; str\n</code></pre> <p>Retrieve a keyset from the database.</p>"},{"location":"api/stac_fastapi/sqlalchemy/tokens/#insert_token","title":"insert_token","text":"<pre><code>def insert_token(\n    self,\n    keyset: str,\n    tries: int = 0\n) -&gt; str\n</code></pre> <p>Insert a keyset into the database.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/","title":"Module stac_fastapi.sqlalchemy.transactions","text":"<p>transactions extension client.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#variables","title":"Variables","text":"<pre><code>logger\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/transactions/#bulktransactionsclient","title":"BulkTransactionsClient","text":"<pre><code>class BulkTransactionsClient(\n    session: stac_fastapi.sqlalchemy.session.Session = NOTHING,\n    debug: bool = False,\n    item_table: Type[stac_fastapi.sqlalchemy.models.database.Item] = &lt;class 'stac_fastapi.sqlalchemy.models.database.Item'&gt;,\n    item_serializer: Type[stac_fastapi.sqlalchemy.serializers.Serializer] = &lt;class 'stac_fastapi.sqlalchemy.serializers.ItemSerializer'&gt;\n)\n</code></pre> <p>Postgres bulk transactions.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.extensions.third_party.bulk_transactions.BaseBulkTransactionsClient</li> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/transactions/#bulk_item_insert","title":"bulk_item_insert","text":"<pre><code>def bulk_item_insert(\n    self,\n    items: stac_fastapi.extensions.third_party.bulk_transactions.Items,\n    chunk_size: Union[int, NoneType] = None,\n    **kwargs\n) -&gt; str\n</code></pre> <p>Bulk item insertion using sqlalchemy core.</p> <p>docs.sqlalchemy.org/en/13/faq/performance.html#i-m-inserting-400-000-rows-with-the-orm-and-it-s-really-slow</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#transactionsclient","title":"TransactionsClient","text":"<pre><code>class TransactionsClient(\n    session: stac_fastapi.sqlalchemy.session.Session = NOTHING,\n    collection_table: Type[stac_fastapi.sqlalchemy.models.database.Collection] = &lt;class 'stac_fastapi.sqlalchemy.models.database.Collection'&gt;,\n    item_table: Type[stac_fastapi.sqlalchemy.models.database.Item] = &lt;class 'stac_fastapi.sqlalchemy.models.database.Item'&gt;,\n    item_serializer: Type[stac_fastapi.sqlalchemy.serializers.Serializer] = &lt;class 'stac_fastapi.sqlalchemy.serializers.ItemSerializer'&gt;,\n    collection_serializer: Type[stac_fastapi.sqlalchemy.serializers.Serializer] = &lt;class 'stac_fastapi.sqlalchemy.serializers.CollectionSerializer'&gt;\n)\n</code></pre> <p>Transactions extension specific CRUD operations.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.types.core.BaseTransactionsClient</li> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#methods_1","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/transactions/#create_collection","title":"create_collection","text":"<pre><code>def create_collection(\n    self,\n    collection: stac_fastapi.types.stac.Collection,\n    **kwargs\n) -&gt; Union[stac_fastapi.types.stac.Collection, starlette.responses.Response, NoneType]\n</code></pre> <p>Create collection.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#create_item","title":"create_item","text":"<pre><code>def create_item(\n    self,\n    collection_id: str,\n    item: Union[stac_fastapi.types.stac.Item, stac_fastapi.types.stac.ItemCollection],\n    **kwargs\n) -&gt; Union[stac_fastapi.types.stac.Item, NoneType]\n</code></pre> <p>Create item.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#delete_collection","title":"delete_collection","text":"<pre><code>def delete_collection(\n    self,\n    collection_id: str,\n    **kwargs\n) -&gt; Union[stac_fastapi.types.stac.Collection, starlette.responses.Response, NoneType]\n</code></pre> <p>Delete collection.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#delete_item","title":"delete_item","text":"<pre><code>def delete_item(\n    self,\n    item_id: str,\n    collection_id: str,\n    **kwargs\n) -&gt; Union[stac_fastapi.types.stac.Item, starlette.responses.Response, NoneType]\n</code></pre> <p>Delete item.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#update_collection","title":"update_collection","text":"<pre><code>def update_collection(\n    self,\n    collection: stac_fastapi.types.stac.Collection,\n    **kwargs\n) -&gt; Union[stac_fastapi.types.stac.Collection, starlette.responses.Response, NoneType]\n</code></pre> <p>Update collection.</p>"},{"location":"api/stac_fastapi/sqlalchemy/transactions/#update_item","title":"update_item","text":"<pre><code>def update_item(\n    self,\n    collection_id: str,\n    item_id: str,\n    item: stac_fastapi.types.stac.Item,\n    **kwargs\n) -&gt; Union[stac_fastapi.types.stac.Item, starlette.responses.Response, NoneType]\n</code></pre> <p>Update item.</p>"},{"location":"api/stac_fastapi/sqlalchemy/version/","title":"Module stac_fastapi.sqlalchemy.version","text":"<p>library version.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/","title":"Module stac_fastapi.sqlalchemy.extensions","text":"<p>sqlalchemy extensions modifications.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#sub-modules","title":"Sub-modules","text":"<ul> <li>stac_fastapi.sqlalchemy.extensions.query</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/#operator","title":"Operator","text":"<pre><code>class Operator(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Defines the set of operators supported by the API.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>stac_pydantic.utils.AutoValueEnum</li> <li>enum.Enum</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#class-variables","title":"Class variables","text":"<pre><code>eq\n</code></pre> <pre><code>gt\n</code></pre> <pre><code>gte\n</code></pre> <pre><code>lt\n</code></pre> <pre><code>lte\n</code></pre> <pre><code>ne\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#queryextension","title":"QueryExtension","text":"<pre><code>class QueryExtension(\n    conformance_classes: List[str] = NOTHING,\n    schema_href: Union[str, NoneType] = None\n)\n</code></pre> <p>Query Extenson.</p> <p>Override the POST request model to add validation against supported fields</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.extensions.core.query.query.QueryExtension</li> <li>stac_fastapi.types.extension.ApiExtension</li> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#class-variables_1","title":"Class variables","text":"<pre><code>GET\n</code></pre> <pre><code>POST\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/#get_request_model","title":"get_request_model","text":"<pre><code>def get_request_model(\n    self,\n    verb: Union[str, NoneType] = 'GET'\n) -&gt; Union[pydantic.main.BaseModel, NoneType]\n</code></pre> <p>Return the request model for the extension.method.</p> <p>The model can differ based on HTTP verb</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#register","title":"register","text":"<pre><code>def register(\n    self,\n    app: fastapi.applications.FastAPI\n) -&gt; None\n</code></pre> <p>Register the extension with a FastAPI application.</p> <p>Parameters:</p> Name Type Description Default app None target FastAPI application. None <p>Returns:</p> Type Description None None"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#queryabletypes","title":"QueryableTypes","text":"<pre><code>class QueryableTypes(\n\n)\n</code></pre> <p>Defines a set of queryable fields.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/#todo-let-the-user-define-these-in-a-config-file","title":"TODO: Let the user define these in a config file","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/#todo-there-is-a-much-better-way-of-defining-this-field-type-mapping-than-two-enums-with-same-keys","title":"TODO: There is a much better way of defining this field &lt;&gt; type mapping than two enums with same keys","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/#class-variables_2","title":"Class variables","text":"<pre><code>dtype\n</code></pre> <pre><code>epsg\n</code></pre> <pre><code>gsd\n</code></pre> <pre><code>height\n</code></pre> <pre><code>maxzoom\n</code></pre> <pre><code>minzoom\n</code></pre> <pre><code>orientation\n</code></pre> <pre><code>width\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/","title":"Module stac_fastapi.sqlalchemy.extensions.query","text":"<p>STAC SQLAlchemy specific query search model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#todo-replace-with-stac-pydantic","title":"TODO: replace with stac-pydantic","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#variables","title":"Variables","text":"<pre><code>NumType\n</code></pre> <pre><code>logger\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#operator","title":"Operator","text":"<pre><code>class Operator(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Defines the set of operators supported by the API.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>stac_pydantic.utils.AutoValueEnum</li> <li>enum.Enum</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#class-variables","title":"Class variables","text":"<pre><code>eq\n</code></pre> <pre><code>gt\n</code></pre> <pre><code>gte\n</code></pre> <pre><code>lt\n</code></pre> <pre><code>lte\n</code></pre> <pre><code>ne\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#queryextension","title":"QueryExtension","text":"<pre><code>class QueryExtension(\n    conformance_classes: List[str] = NOTHING,\n    schema_href: Union[str, NoneType] = None\n)\n</code></pre> <p>Query Extenson.</p> <p>Override the POST request model to add validation against supported fields</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.extensions.core.query.query.QueryExtension</li> <li>stac_fastapi.types.extension.ApiExtension</li> <li>abc.ABC</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#class-variables_1","title":"Class variables","text":"<pre><code>GET\n</code></pre> <pre><code>POST\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#get_request_model","title":"get_request_model","text":"<pre><code>def get_request_model(\n    self,\n    verb: Union[str, NoneType] = 'GET'\n) -&gt; Union[pydantic.main.BaseModel, NoneType]\n</code></pre> <p>Return the request model for the extension.method.</p> <p>The model can differ based on HTTP verb</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#register","title":"register","text":"<pre><code>def register(\n    self,\n    app: fastapi.applications.FastAPI\n) -&gt; None\n</code></pre> <p>Register the extension with a FastAPI application.</p> <p>Parameters:</p> Name Type Description Default app None target FastAPI application. None <p>Returns:</p> Type Description None None"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#queryextensionpostrequest","title":"QueryExtensionPostRequest","text":"<pre><code>class QueryExtensionPostRequest(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Queryable validation.</p> <p>Add queryables validation to the POST request to raise errors for unsupported querys.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#class-variables_2","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#static-methods","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#validate_query_fields","title":"validate_query_fields","text":"<pre><code>def validate_query_fields(\n    values: Dict\n) -&gt; Dict\n</code></pre> <p>Validate query fields.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#methods_1","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#queryabletypes","title":"QueryableTypes","text":"<pre><code>class QueryableTypes(\n\n)\n</code></pre> <p>Defines a set of queryable fields.</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#todo-let-the-user-define-these-in-a-config-file","title":"TODO: Let the user define these in a config file","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#todo-there-is-a-much-better-way-of-defining-this-field-type-mapping-than-two-enums-with-same-keys","title":"TODO: There is a much better way of defining this field &lt;&gt; type mapping than two enums with same keys","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#class-variables_3","title":"Class variables","text":"<pre><code>dtype\n</code></pre> <pre><code>epsg\n</code></pre> <pre><code>gsd\n</code></pre> <pre><code>height\n</code></pre> <pre><code>maxzoom\n</code></pre> <pre><code>minzoom\n</code></pre> <pre><code>orientation\n</code></pre> <pre><code>width\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#queryables","title":"Queryables","text":"<pre><code>class Queryables(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Queryable fields.</p> <p>Define an enum of queryable fields and their data type.  Queryable fields are explicitly defined for two reasons:     1. So the caller knows which fields they can query by     2. Because JSONB queries with sqlalchemy ORM require casting the type of the field at runtime         (see <code>QueryableTypes</code>)</p>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#todo-let-the-user-define-these-in-a-config-file_1","title":"TODO: Let the user define these in a config file","text":""},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>stac_pydantic.utils.AutoValueEnum</li> <li>enum.Enum</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/extensions/query/#class-variables_4","title":"Class variables","text":"<pre><code>dtype\n</code></pre> <pre><code>epsg\n</code></pre> <pre><code>foo\n</code></pre> <pre><code>gsd\n</code></pre> <pre><code>height\n</code></pre> <pre><code>maxzoom\n</code></pre> <pre><code>minzoom\n</code></pre> <pre><code>orientation\n</code></pre> <pre><code>width\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/","title":"Module stac_fastapi.sqlalchemy.models","text":"<p>stac_fastapi.postgres.models module.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/#sub-modules","title":"Sub-modules","text":"<ul> <li>stac_fastapi.sqlalchemy.models.database</li> <li>stac_fastapi.sqlalchemy.models.search</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/","title":"Module stac_fastapi.sqlalchemy.models.database","text":"<p>SQLAlchemy ORM models.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/models/database/#basemodel","title":"BaseModel","text":"<pre><code>class BaseModel(\n    **kwargs\n)\n</code></pre> <p>The base class of the class hierarchy.</p> <p>When called, it accepts no arguments and returns a new featureless instance that has no instance attributes and cannot be given any.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#descendants","title":"Descendants","text":"<ul> <li>stac_fastapi.sqlalchemy.models.database.Collection</li> <li>stac_fastapi.sqlalchemy.models.database.Item</li> <li>stac_fastapi.sqlalchemy.models.database.PaginationToken</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#class-variables","title":"Class variables","text":"<pre><code>metadata\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#collection","title":"Collection","text":"<pre><code>class Collection(\n    **kwargs\n)\n</code></pre> <p>Collection orm model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.sqlalchemy.models.database.Base</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#class-variables_1","title":"Class variables","text":"<pre><code>children\n</code></pre> <pre><code>description\n</code></pre> <pre><code>extent\n</code></pre> <pre><code>id\n</code></pre> <pre><code>keywords\n</code></pre> <pre><code>license\n</code></pre> <pre><code>links\n</code></pre> <pre><code>metadata\n</code></pre> <pre><code>providers\n</code></pre> <pre><code>stac_extensions\n</code></pre> <pre><code>stac_version\n</code></pre> <pre><code>summaries\n</code></pre> <pre><code>title\n</code></pre> <pre><code>type\n</code></pre> <pre><code>version\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#geojsongeometry","title":"GeojsonGeometry","text":"<pre><code>class GeojsonGeometry(\n    geometry_type='GEOMETRY',\n    srid=-1,\n    dimension=2,\n    spatial_index=True,\n    use_N_D_index=False,\n    management=False,\n    use_typmod=None,\n    from_text=None,\n    name=None,\n    nullable=True\n)\n</code></pre> <p>Custom geoalchemy type which returns GeoJSON.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>geoalchemy2.types.Geometry</li> <li>geoalchemy2.types._GISType</li> <li>sqlalchemy.sql.type_api.UserDefinedType</li> <li>sqlalchemy.sql.type_api.TypeEngine</li> <li>sqlalchemy.sql.visitors.Visitable</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#class-variables_2","title":"Class variables","text":"<pre><code>Comparator\n</code></pre> <pre><code>ElementType\n</code></pre> <pre><code>as_binary\n</code></pre> <pre><code>cache_ok\n</code></pre> <pre><code>comparator_factory\n</code></pre> <pre><code>ensure_kwarg\n</code></pre> <pre><code>from_text\n</code></pre> <pre><code>hashable\n</code></pre> <pre><code>name\n</code></pre> <pre><code>should_evaluate_none\n</code></pre> <pre><code>sort_key_function\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#static-methods","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/models/database/#check_ctor_args","title":"check_ctor_args","text":"<pre><code>def check_ctor_args(\n    geometry_type,\n    srid,\n    dimension,\n    management,\n    use_typmod,\n    nullable\n)\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#instance-variables","title":"Instance variables","text":"<pre><code>python_type\n</code></pre> <p>Return the Python type object expected to be returned</p> <p>by instances of this type, if known.</p> <p>Basically, for those types which enforce a return type, or are known across the board to do such for all common DBAPIs (like <code>int</code> for example), will return that type.</p> <p>If a return type is not defined, raises <code>NotImplementedError</code>.</p> <p>Note that any type also accommodates NULL in SQL which means you can also get back <code>None</code> from any type in practice.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#methods","title":"Methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/models/database/#adapt","title":"adapt","text":"<pre><code>def adapt(\n    self,\n    cls,\n    **kw\n)\n</code></pre> <p>Produce an \"adapted\" form of this type, given an \"impl\" class</p> <p>to work with.</p> <p>This method is used internally to associate generic types with \"implementation\" types that are specific to a particular dialect.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#bind_expression","title":"bind_expression","text":"<pre><code>def bind_expression(\n    self,\n    bindvalue\n)\n</code></pre> <p>Specific bind_expression that automatically adds a conversion function</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#bind_processor","title":"bind_processor","text":"<pre><code>def bind_processor(\n    self,\n    dialect\n)\n</code></pre> <p>Specific bind_processor that automatically process spatial elements</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#coerce_compared_value","title":"coerce_compared_value","text":"<pre><code>def coerce_compared_value(\n    self,\n    op,\n    value\n)\n</code></pre> <p>Suggest a type for a 'coerced' Python value in an expression.</p> <p>Default behavior for :class:<code>.UserDefinedType</code> is the same as that of :class:<code>.TypeDecorator</code>; by default it returns <code>self</code>, assuming the compared value should be coerced into the same type as this one.  See</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#column_expression","title":"column_expression","text":"<pre><code>def column_expression(\n    self,\n    col\n)\n</code></pre> <p>Specific column_expression that automatically adds a conversion function</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#compare_against_backend","title":"compare_against_backend","text":"<pre><code>def compare_against_backend(\n    self,\n    dialect,\n    conn_type\n)\n</code></pre> <p>Compare this type against the given backend type.</p> <p>This function is currently not implemented for SQLAlchemy types, and for all built in types will return <code>None</code>.  However, it can be implemented by a user-defined type where it can be consumed by schema comparison tools such as Alembic autogenerate.</p> <p>A future release of SQLAlchemy will potentially implement this method for builtin types as well.</p> <p>The function should return True if this type is equivalent to the given type; the type is typically reflected from the database so should be database specific.  The dialect in use is also passed.   It can also return False to assert that the type is not equivalent.</p> <p>Parameters:</p> Name Type Description Default dialect None a :class:<code>.Dialect</code> that is involved in the comparison. None conn_type None the type object reflected from the backend... versionadded:: 1.0.3 None"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#compare_values","title":"compare_values","text":"<pre><code>def compare_values(\n    self,\n    x,\n    y\n)\n</code></pre> <p>Compare two values for equality.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#compile","title":"compile","text":"<pre><code>def compile(\n    self,\n    dialect=None\n)\n</code></pre> <p>Produce a string-compiled form of this :class:<code>.TypeEngine</code>.</p> <p>When called with no arguments, uses a \"default\" dialect to produce a string result.</p> <p>Parameters:</p> Name Type Description Default dialect None a :class:<code>.Dialect</code> instance. None"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#copy","title":"copy","text":"<pre><code>def copy(\n    self,\n    **kw\n)\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#copy_value","title":"copy_value","text":"<pre><code>def copy_value(\n    self,\n    value\n)\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#dialect_impl","title":"dialect_impl","text":"<pre><code>def dialect_impl(\n    self,\n    dialect\n)\n</code></pre> <p>Return a dialect-specific implementation for this</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#evaluates_none","title":"evaluates_none","text":"<pre><code>def evaluates_none(\n    self\n)\n</code></pre> <p>Return a copy of this type which has the :attr:<code>.should_evaluate_none</code></p> <p>flag set to True.</p> <p>E.g.::</p> <pre><code>    Table(\n        'some_table', metadata,\n        Column(\n            String(50).evaluates_none(),\n            nullable=True,\n            server_default='no value')\n    )\n</code></pre> <p>The ORM uses this flag to indicate that a positive value of <code>None</code> is passed to the column in an INSERT statement, rather than omitting the column from the INSERT statement which has the effect of firing off column-level defaults.   It also allows for types which have special behavior associated with the Python None value to indicate that the value doesn't necessarily translate into SQL NULL; a prime example of this is a JSON type which may wish to persist the JSON value <code>'null'</code>.</p> <p>In all cases, the actual NULL SQL value can be always be persisted in any column by using the :obj:<code>_expression.null</code> SQL construct in an INSERT statement or associated with an ORM-mapped attribute.</p> <p>.. note::</p> <pre><code>The \"evaluates none\" flag does **not** apply to a value\nof ``None`` passed to :paramref:`_schema.Column.default` or\n:paramref:`_schema.Column.server_default`; in these cases,\n``None``\nstill means \"no default\".\n</code></pre> <p>.. versionadded:: 1.1</p> <p>.. seealso::</p> <pre><code>:ref:`session_forcing_null` - in the ORM documentation\n\n:paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON\ninteraction with this flag.\n\n:attr:`.TypeEngine.should_evaluate_none` - class-level flag\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#get_col_spec","title":"get_col_spec","text":"<pre><code>def get_col_spec(\n    self\n)\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#get_dbapi_type","title":"get_dbapi_type","text":"<pre><code>def get_dbapi_type(\n    self,\n    dbapi\n)\n</code></pre> <p>Return the corresponding type object from the underlying DB-API, if</p> <p>any.</p> <p>This can be useful for calling <code>setinputsizes()</code>, for example.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#literal_processor","title":"literal_processor","text":"<pre><code>def literal_processor(\n    self,\n    dialect\n)\n</code></pre> <p>Return a conversion function for processing literal values that are</p> <p>to be rendered directly without using binds.</p> <p>This function is used when the compiler makes use of the \"literal_binds\" flag, typically used in DDL generation as well as in certain scenarios where backends don't accept bound parameters.</p> <p>.. versionadded:: 0.9.0</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#result_processor","title":"result_processor","text":"<pre><code>def result_processor(\n    self,\n    dialect: str,\n    coltype\n)\n</code></pre> <p>Override default processer to return GeoJSON.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#with_variant","title":"with_variant","text":"<pre><code>def with_variant(\n    self,\n    type_,\n    dialect_name\n)\n</code></pre> <p>Produce a new type object that will utilize the given</p> <p>type when applied to the dialect of the given name.</p> <p>e.g.::</p> <pre><code>from sqlalchemy.types import String\nfrom sqlalchemy.dialects import mysql\n\ns = String()\n\ns = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')\n</code></pre> <p>The construction of :meth:<code>.TypeEngine.with_variant</code> is always from the \"fallback\" type to that which is dialect specific. The returned type is an instance of :class:<code>.Variant</code>, which itself provides a :meth:<code>.Variant.with_variant</code> that can be called repeatedly.</p> <p>Parameters:</p> Name Type Description Default type_ None a :class:<code>.TypeEngine</code> that will be selectedas a variant from the originating type, when a dialectof the given name is in use. None dialect_name None base name of the dialect which usesthis type. (i.e. <code>'postgresql'</code>, <code>'mysql'</code>, etc.) None"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#item","title":"Item","text":"<pre><code>class Item(\n    **kwargs\n)\n</code></pre> <p>Item orm model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.sqlalchemy.models.database.Base</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#class-variables_3","title":"Class variables","text":"<pre><code>assets\n</code></pre> <pre><code>bbox\n</code></pre> <pre><code>collection_id\n</code></pre> <pre><code>datetime\n</code></pre> <pre><code>geometry\n</code></pre> <pre><code>id\n</code></pre> <pre><code>links\n</code></pre> <pre><code>metadata\n</code></pre> <pre><code>parent_collection\n</code></pre> <pre><code>properties\n</code></pre> <pre><code>stac_extensions\n</code></pre> <pre><code>stac_version\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#static-methods_1","title":"Static methods","text":""},{"location":"api/stac_fastapi/sqlalchemy/models/database/#get_field","title":"get_field","text":"<pre><code>def get_field(\n    field_name\n)\n</code></pre> <p>Get a model field.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#paginationtoken","title":"PaginationToken","text":"<pre><code>class PaginationToken(\n    **kwargs\n)\n</code></pre> <p>Pagination orm model.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#ancestors-in-mro_3","title":"Ancestors (in MRO)","text":"<ul> <li>stac_fastapi.sqlalchemy.models.database.Base</li> </ul>"},{"location":"api/stac_fastapi/sqlalchemy/models/database/#class-variables_4","title":"Class variables","text":"<pre><code>id\n</code></pre> <pre><code>keyset\n</code></pre> <pre><code>metadata\n</code></pre>"},{"location":"api/stac_fastapi/sqlalchemy/models/search/","title":"Module stac_fastapi.sqlalchemy.models.search","text":"<p>Queryable data types for sqlalchemy backend.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/search/#classes","title":"Classes","text":""},{"location":"api/stac_fastapi/sqlalchemy/models/search/#queryabletypes","title":"QueryableTypes","text":"<pre><code>class QueryableTypes(\n\n)\n</code></pre> <p>Defines a set of queryable fields.</p>"},{"location":"api/stac_fastapi/sqlalchemy/models/search/#todo-let-the-user-define-these-in-a-config-file","title":"TODO: Let the user define these in a config file","text":""},{"location":"api/stac_fastapi/sqlalchemy/models/search/#todo-there-is-a-much-better-way-of-defining-this-field-type-mapping-than-two-enums-with-same-keys","title":"TODO: There is a much better way of defining this field &lt;&gt; type mapping than two enums with same keys","text":""},{"location":"api/stac_fastapi/sqlalchemy/models/search/#class-variables","title":"Class variables","text":"<pre><code>dtype\n</code></pre> <pre><code>epsg\n</code></pre> <pre><code>gsd\n</code></pre> <pre><code>height\n</code></pre> <pre><code>maxzoom\n</code></pre> <pre><code>minzoom\n</code></pre> <pre><code>orientation\n</code></pre> <pre><code>width\n</code></pre>"}]}